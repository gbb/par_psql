#!/bin/bash
# Author: Graeme Bell 
# <xg--i--tx@graemebell.net>. Remove the -- to email me. 
# Open sourced with permission - see license.md
# v0.21

# Parpsql runs any lines marked with --& as a parallel thread, keeping the same command line options.
# Beware that each --& will run separately, so multi-line SQL should be checked carefully when --& is used.
# Scripts written for parpsql also run in psql. 
# You must use --file=filename, not -f, or stdin for the input.

# bash safety settings
set -uo pipefail
IFS=$'\n\t'

# globals
DEBUG=0
inputfile=""
sqlline=""
currentfile=""
serialtodofile=""
semicolon=0
parpsqlmarker=0
parmode=0
lineno=1
cmdline="$@"
pids=()

# helper function
function debug {
  if [ $DEBUG -eq 1 ];
  then
    echo "$@"
  fi
}

# wait on background processes individually to check their exit status
function sync {
  debug "waiting on ${#pids[@]} SQL queries to finish"
  error=0
  for pid in ${pids[*]}; do
    wait $pid
    if [ $? -ne 0 ];
    then
      error=1
    fi
  done

  if [ $error -eq 1 ];
  then
    exit 3
  fi
  pids=()
}

# Check that the input file is specified with --file

debug "inputfile: $inputfile"
debug "Input parameters: $cmdline"

psql_cmdline=""

# Ugly alternative to getopt. Print out version and exit if --parpsqlversion is used.
for item in "$@"; do               # for each item in param array
  if [[ $item == "--parpsqlversion" ]] ; then
    echo "par_psql version 0.2"; exit
  fi
done

for item in "$@"; do               # for each item in param array

  if [[ $item == "-f" ]] ; then 
    echo "-f parameter detected. Aborted."
    echo "  parpsql requires --file=filename. Please don't use -f or stdin."
    exit 1
  fi

  if [[ $item == "--file="* ]] ; then   # if it starts with --file=
    inputfile="${item:7}"
  else
    psql_cmdline="$psql_cmdline $item"
  fi
  
  if [[ $item == "-1" ]] || [[ $item == "--single-transaction" ]] ; then
    echo "-1/--single-transaction not supported. Aborted"
    exit 1
  fi

done

# Check the input file was specified

if [[ "$inputfile" == "" ]] ; then 
    echo "--file parameter missing. Aborted."
    echo "  parpsql requires --file=filename. Please don't use -f or stdin."
    exit 1
fi


# Check the input file exists

if [[ ! -f "$inputfile" ]] ; then
    echo "File $inputfile does not exist. Aborted."
    exit 1
fi

cmdline=$psql_cmdline

# Now parse up the file into parallel and serial sections. 
# Simple cases are treated first.
# The basic idea is that commands are built up into 'currentfile' and serial sets of commands into 'serialtodo'

parseloop() {

  # Find out if we're changing to a parallel or serial section, or have an unsupported parallel query.
  # Warning: >0 is 'true' and 0 'false' here, the opposite of normal BASH definitions.

  semicolon=$(echo "$sqlline" | grep ';' | wc -l)
  parpsqlmarker=$(echo "$sqlline" | grep -- '--&' | wc -l)    # '--' prevents grep parsing '--&' as its own param
  transaction=$(echo "$sqlline" | grep --ignore-case -w "TRANSACTION\|BEGIN\|COMMIT\|ROLLBACK" | wc -l)

  debug "SC=$semicolon; PSQLM=$parpsqlmarker ; TRANS=$transaction; PARMODE=$parmode"

  # If you see BEGIN or TRANSACTION, and there is a parpsqlmarker, it's an error. Exit. 
  if [[ "$transaction" -ne 0 && "$parpsqlmarker" -ne 0 ]] ; then 
	echo 'Error 1: BEGIN/COMMIT/TRANSACTION/ROLLBACK keyword detected. Transactions/function statements may not be used in parallel mode. Exiting.'; 
	exit 1; 

  # If you see a parpsqlmarker with no semicolon; it's an error in the input
  elif [[ "$semicolon" -eq 0 && "$parpsqlmarker" -ne 0 ]]; then 
	echo 'Error 2: When you use the parallel marker --&, you must have ";" in the same line. Exiting.'; 
	exit 1; 

  # If you don't see a semicolon or parpsqlmarker, keep writing to the current file
  elif [[ "$semicolon" -eq 0 && "$parpsqlmarker" -eq 0 ]]; then 
	debug 'No change of mode. Continuing to write to file'; 
	echo "$sqlline" >> $currentfile

  # if you see a semicolon and a parpsqlmarker together, and are in parallel mode, 
  elif [[ "$semicolon" -ne 0 && "$parpsqlmarker" -ne 0 && "$parmode" -ne 0 ]]; then 
	debug 'parpsql marker found; in parallel mode already; staying in parallel mode'

  # write the current line out to currentfile
	echo "$sqlline" >> $currentfile

  # start running the current file in parallel
	( eval psql "$cmdline" --file=$currentfile && rm -f "$currentfile" ) & pids+=($!)  

  # make a new current file.
	currentfile=$(mktemp)

  # if you see a semicolon and a parpsqlmarker together, and are in serial mode, change to parallel mode
  elif [[ "$semicolon" -ne 0 && "$parpsqlmarker" -ne 0 && "$parmode" -eq 0 ]]; then 
	debug 'parpsql marker found; in serial mode; changing to parallel mode'

  # write the current line out to the current file
	echo "$sqlline" >> $currentfile

  # first, run the 'serial code' file that was previously built up, non-parallelised
  # wait for it to finish
	( eval psql $cmdline --file=$serialtodofile && rm -f "$serialtodofile" ) || exit $? 
	
  # then run the current file in parallel && delete it after
	( eval psql $cmdline --file=$currentfile && rm -f "$currentfile" ) & pids+=($!)
	
  # start parallel mode
	parmode=1

  # make a new current file
	currentfile=$(mktemp)

  # make a new serialtodo file
	serialtodofile=$(mktemp)

  # If you see a semicolon but no parpsql marker, and are in parallel mode, end parallel mode, start serial mode.
  elif [[ "$semicolon" -ne 0 && "$parpsqlmarker" -eq 0 && "$parmode" -ne 0 ]]; then 
	debug 'ending parallel mode, starting serial mode'

  # Syncronise parallel tasks.
	sync

  # Save the current line to the current file.
 	echo "$sqlline" >> $currentfile	

  # concatenate the current file to serial-to-do
	cat $currentfile >> $serialtodofile
 	rm $currentfile

  # end parallel mode
	parmode=0

  # make a new current file
	currentfile=$(mktemp)
	
  # NOTE: you might think of 'optimising' by removing the currentfile creations
  # but remember that there may have been e.g. 3-4 previous partial lines put into currentfile 
  # before the current part was moved into serialtodofile. So don't do that please.

  # If you see a semicolon but no parpsql marker, and are in serial mode, add the current file to the serial file
  elif [[ "$semicolon" -ne 0 && "$parpsqlmarker" -eq 0 && "$parmode" -eq 0 ]]; then 
	debug 'staying in serial mode'

  # Save line to current file.
 	echo "$sqlline" >> $currentfile	

  # Save the current file into serialtodofile
	cat $currentfile >> $serialtodofile
        rm $currentfile

  # make a new current file
	currentfile=$(mktemp)

  fi 

}


# main function starts here

currentfile=$(mktemp)
serialtodofile=$(mktemp)

debug "currentfile: $currentfile"
debug "serialtodofile: $serialtodofile"

while IFS='' read -r sqlline || [[ -n $sqlline ]]; do
debug "Current line number: $lineno"
parseloop;
lineno=$((lineno+1))
done < $inputfile 

rm $currentfile

sync
( eval psql $cmdline --file=$serialtodofile && rm -f "$serialtodofile" ) || exit $?

# At the end, we must ensure everything is synchronised then run 'serialtodofile' in case anything is left
# e.g. in case we ended in serial mode. 
# end of main function


# TODO: Currently don't handle 'broken' psql files very well, 
#       you can have partial execution with a leftover 'currentfile' that doesn't execute.
#       Add a test  here in case any leftover text without a ';' ends up in currentfile.
#       it can go just before "rm $currentfile" after the while loop
# TODO: add a proper comment parser and multi-line error detector
#       (e.g. --;   would be misparsed as a query;    BEGIN TRANSACTION \n ;  is not detected) .... 
# TODO: It would be nicer to pre-parse the whole file to find out if there will be an error during execution and abort before beginning.
# TODO: clean up temp files on abort.

